{"id":"node_modules/pg-protocol/dist/index.js","dependencies":[{"name":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\index.js.map","includedInParent":true,"mtime":1682540113153},{"name":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\src\\index.ts","includedInParent":true,"mtime":1682540113165},{"name":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\package.json","includedInParent":true,"mtime":1682550522308},{"name":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\package.json","includedInParent":true,"mtime":1682540113148},{"name":"./messages","loc":{"line":4,"column":27,"index":172},"parent":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\index.js","resolved":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\messages.js"},{"name":"./serializer","loc":{"line":6,"column":29,"index":342},"parent":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\index.js","resolved":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\serializer.js"},{"name":"./parser","loc":{"line":8,"column":25,"index":504},"parent":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\index.js","resolved":"C:\\Users\\Lee\\webDev\\typescript\\ShowDiscovery\\node_modules\\pg-protocol\\dist\\parser.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseError = exports.serialize = exports.parse = void 0;\nconst messages_1 = require(\"./messages\");\nObject.defineProperty(exports, \"DatabaseError\", { enumerable: true, get: function () { return messages_1.DatabaseError; } });\nconst serializer_1 = require(\"./serializer\");\nObject.defineProperty(exports, \"serialize\", { enumerable: true, get: function () { return serializer_1.serialize; } });\nconst parser_1 = require(\"./parser\");\nfunction parse(stream, callback) {\n    const parser = new parser_1.Parser();\n    stream.on('data', (buffer) => parser.parse(buffer, callback));\n    return new Promise((resolve) => stream.on('end', () => resolve()));\n}\nexports.parse = parse;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,yCAA0D;AAUtC,8FAVK,wBAAa,OAUL;AATjC,6CAAwC;AAS/B,0FATA,sBAAS,OASA;AARlB,qCAAkD;AAElD,SAAgB,KAAK,CAAC,MAA6B,EAAE,QAAyB;IAC5E,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAA;IAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACrE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;AACpE,CAAC;AAJD,sBAIC","sourcesContent":["import { BackendMessage, DatabaseError } from './messages'\nimport { serialize } from './serializer'\nimport { Parser, MessageCallback } from './parser'\n\nexport function parse(stream: NodeJS.ReadableStream, callback: MessageCallback): Promise<void> {\n  const parser = new Parser()\n  stream.on('data', (buffer: Buffer) => parser.parse(buffer, callback))\n  return new Promise((resolve) => stream.on('end', () => resolve()))\n}\n\nexport { serialize, DatabaseError }\n"]}},"error":null,"hash":"cffb15ceb9c453e9b0e825974698c9f5","cacheData":{"env":{}}}